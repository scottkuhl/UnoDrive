@inherits LayoutComponentBase
@using UnoDrive.Providers
@implements IDisposable
@inject AppState AppState

<AppMudThemeProvider />
<AppMudProviders />
<AppStateProvider />

<MudLayout>
    <MudAppBar Color="Color.Transparent" Elevation="0" Dense="true">
        <MudIconButton Icon="@Icons.Material.Rounded.Menu" Color="Color.Inherit" Edge="Edge.Start"
                       OnClick="@(_ => DrawerToggle())"/>
        <MudText Typo="Typo.h5" Class="ml-3">UnoDrive - @AppState.PageTitle</MudText>
        <MudSpacer/>
        <MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Rounded.Add" Color="Color.Primary" Edge="Edge.End" Class="mr-4">New</MudButton>
        <MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Rounded.Upload" Color="Color.Default" Edge="Edge.End">Upload</MudButton>
    </MudAppBar>
    <MudDrawer @bind-Open="_drawerOpen" ClipMode="DrawerClipMode.Always" Elevation="0">
        <MudNavMenu Rounded="true" Margin="Margin.Dense" Color="Color.Primary" Class="pa-2">
            <MudText Typo="Typo.h6" Align="Align.Center">John Smith</MudText>
            <MudText Typo="Typo.body2" Class="px-4 mud-text-secondary" Align="Align.Center">john.smith@myemail.com</MudText>
            <MudDivider Class="my-2"/>
            <NavMenuLink Href="" Match="NavLinkMatch.All" Icon="@Icons.Material.Rounded.PlayArrow" Name="My Files"/>
            <NavMenuLink Href="/recent-files" Icon="@Icons.Material.Rounded.Save" Name="Recent Files"/>
            <NavMenuLink Href="/shared-files" Icon="@Icons.Material.Rounded.Refresh" Name="Shared Files"/>
            <NavMenuLink Href="/recycle-bin" Icon="@Icons.Material.Rounded.Recycling" Name="Recycle Bin"/>
            <NavMenuLink Href="/login" Icon="@Icons.Material.Rounded.Logout" Name="Sign Out"/>
        </MudNavMenu>
    </MudDrawer>
    <MudMainContent Class="mt-16 pa-4">
        <MudPaper Elevation="0">
        @Body
        </MudPaper>
    </MudMainContent>
</MudLayout>

@code {
    private bool _drawerOpen = true;

    private void DrawerToggle()
    {
        _drawerOpen = !_drawerOpen;
    }
    
    protected override void OnInitialized()
    {
        AppState.OnChange += StateHasChanged;
    }
    
    public void Dispose()
    {
        Dispose(true);
        GC.SuppressFinalize(this);
    }

    protected virtual void Dispose(bool disposing)
    {
        if (disposing)
        {
            AppState.OnChange -= StateHasChanged;
        }
    }
}