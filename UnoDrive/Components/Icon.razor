@implements IDisposable
@inject AppState AppState

<MudImage Class="@IconClass" Src="@IconUrl" Alt="@Alt" Width="@Width" Height="@Height" @attributes="AdditionalAttributes" />

@code {
    [Parameter] public string @Class { get; set; } = string.Empty;
    [Parameter(CaptureUnmatchedValues = true)] public IReadOnlyDictionary<string, object> AdditionalAttributes { get; set; } = new Dictionary<string, object>();
    [Parameter] public int Height { get; set; } = 36;
    [Parameter, EditorRequired] public string IconName { get; set; } = string.Empty;
    [Parameter] public string Name { get; set; } = string.Empty;
    [Parameter] public int Width { get; set; } = 36;
    
    private string Alt => !string.IsNullOrWhiteSpace(Name) ? Name : IconName;
    private string IconClass => $"cursor-pointer {Class}";
    private string IconUrl => $"/images/icons/{Theme}/{IconName.ToLower()}.png";
    private string? Theme { get; set; }
    
    protected override void OnInitialized()
    {
        base.OnInitialized();
        AppState.OnChange += AppStateHasChanged;
    }
    
    private void AppStateHasChanged()
    {
        Theme = AppState.Theme;
        StateHasChanged();
    }
    
    public void Dispose()
    {
        Dispose(true);
        GC.SuppressFinalize(this);
    }

    protected virtual void Dispose(bool disposing)
    {
        if (disposing)
        {
            AppState.OnChange -= AppStateHasChanged;
        }
    }
}